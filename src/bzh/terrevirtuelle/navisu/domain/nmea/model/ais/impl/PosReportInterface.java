/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bzh.terrevirtuelle.navisu.domain.nmea.model.ais.impl;

import bzh.terrevirtuelle.navisu.domain.nmea.model.ais.AISMessagePositionReport;

/**
 *
 * @author serge
 */
public interface PosReportInterface extends AISMessagePositionReport {
    /**
     * The length in bytes that a valid AIS position report message should have
     */
    int LENGTH = 168;

    /**
     * Returns the course over ground. This value can be analyzed further with
     * utility class {@link UtilsAngle12}.
     *
     * @return an integer value representing the course over ground in 1/10&deg;
     * for values in the range of 0 to 3599.<br>
     * 3600 (E10h) = not available. <br>
     * 3601 or higher should not be used
     */
    int getCourseOverGround();

    /**
     * Returns the latitude in degrees. This value can be analyzed further with
     * utility class {@link UtilsPositionInfo}.
     *
     * @return a double value representing the latitude in degrees
     * (&plusmn;90&deg;, North = positive, South = negative; 91&deg; = (3412140
     * hex) = not available = default).
     */
    double getLatitudeInDegrees();

    /**
     * Returns the longitude in degrees. This value can be analyzed further with
     * utility class {@link UtilsPositionInfo}.
     *
     * @return a double value representing the longitude in degrees
     * (&plusmn;180&deg;, East = positive, West = negative; 181&deg; = (6791AC0
     * hex) = not available = default).
     */
    double getLongitudeInDegrees();

    /**
     * Returns the navigational status. This can be further analyzed using
     * utility class {@link UtilsNavStatus}.
     *
     * @return an integer in the range of 0 to 15
     */
    int getNavigationalStatus();

    /**
     * Returns the position accuracy.
     *
     * @return a boolean value representing position accuracy: <br>
     * true = high (&le; 10 m) <br>
     * false = low (&gt; 10 m)
     */
    boolean getPositionAccuracy();

    /**
     * Returns the RAIM flag, which describes the receiver autonomous integrity
     * monitoring status of the electronic position fixing device.
     *
     * @return a boolean value: <br>
     * false = RAIM not in use <br>
     * true = RAIM in use
     */
    boolean getRaimFlag();

    /**
     * Returns the rate of turn. This value can be analyzed further with utility
     * class {@link UtilsRateOfTurn8}.
     *
     * @return an integer value in the range of -128 to 127
     */
    int getRateOfTurn();

    /**
     * Returns the spare bits.
     *
     * @return the integer value of the spare bits, which should be zero.
     */
    int getSpare();

    /**
     * Returns the special maneuver indicator.
     *
     * @return an integer value with the following meaning: <br>
     * 0 = not available <br>
     * 1 = not engaged in special maneuver <br>
     * 2 = engaged in special maneuver (i.e.: regional passing arrangement on
     * Inland Waterway)
     */
    int getSpecialManoeuvre();

    /**
     * Returns the speed over ground.
     *
     * @return an integer value in the range of 0 to 1023, representing the
     * speed over ground in 1/10 knot steps (0-102.2 knots) <br>
     * 1023 = not available <br>
     * 1022 = 102.2 knots or higher
     */
    int getSpeedOverGround();

    /**
     * Returns the speed over ground as a string.
     *
     * @return a string representing the speed over ground
     */
    String getSpeedOverGroundString();

    /**
     * Returns the time stamp contained in the message. This can be analyzed
     * further using utility class {@link UtilsTimeStamp}.
     *
     * @return an integer value representing the UTC second when the report was
     * generated by the electronic position fixing system (EPFS) (0-59) <br>
     * 60 if time stamp is not available <br>
     * 61 if positioning system is in manual input mode <br>
     * 62 if electronic position fixing system operates in estimated (dead
     * reckoning) mode <br>
     * 63 if the positioning system is inoperative
     */
    int getTimeStamp();

    /**
     * Returns the true heading.
     *
     * @return an integer value representing the true heading in degrees
     * (0-359). <br>
     * 511 indicates not available
     */
    int getTrueHeading();

    /**
     * Generates a String representing the AIS message. Format: all fields are
     * shown in the order as specified by the standard separated by the
     * SEPARATOR string.
     */
    String toString();
    
}
